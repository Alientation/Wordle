(x) Rework DimensionComponents to simplify repetitive classes
    -   potentially by making one DimensionComponents class with static objects of DimensionComponents
        that will return the dimension of a passed object. Will have to refactor Dimension classes too
        to store subreferences


(/) Events, Registering Event Handlers, and Passing Events To Handlers
(/) Add Key/Mouse input events
(/) Background
    /   Background Image
(/) RenderableImage
(/) Rework Builder Pattern
    /   Use Generics to reduce repetitive code
(/) Z-Indexing
    /   Allow users to customize the z index of each renderable, while also on adjusting as needed in runtime
        /   boolean dynamicZIndexing?
(/) Custom Window Renderer Class
    /   Stores the order renderables should be rendered in
    /   window render will just call this render
(/) Variable TPS and FPS
    /   Game loop must handle both separately
    /   Thread sleep must also do the same

(-) REFACTOR INTO MODEL VIEW CONTROLLER FORMAT
(-) FIX BUGS
    -   Renderables are not rendering, tends to be the first ones
        Or they are being covered up by the JFrames rendering
    /   Some renderables are being created without validating their values??
        RadiusWidth and RadiusHeight are having some problems with being null, same with id
    /   Find the renderables that are unidentified
    /   StackElements are being rendered/updated too much, like WAY too much
    -   Dimension resizing does not actually rely on dimensions calling resize on their renderable
        Might be because of improper/nonexistent method of registering sub-renderables to dimensions
(-) Fix JFrame/Window flickering when resizing/moving the window up
    x   Think it is caused by JFrame rendering without the window container rendering
    -   Actually think it is caused by the renderable, only happens when resizing the window to where
        it is smaller than before on one dimension
(-) Frame
    -   Rounded edges
    -   thickness, color, transparency
    -   make sure whenever the frame itself is updated, tell the container renderableComponent to update to
(-) More Events
    -   Events for everything! (YES LITERALLY EVERYTHING NEEDS EVENTS)
(-) User input events need to be handled in a special way
    -   The window each renderable is in handles the user input events by determining which renderable should handle it
        The window will always handle events (call eventDispatcher) whereas renderables only handle events if the user is actively on it
            1) mouse inputs, check x and y to see which renderable the user clicks on, make sure to keep track of the z indexing

(-) Button
(-) Fonts